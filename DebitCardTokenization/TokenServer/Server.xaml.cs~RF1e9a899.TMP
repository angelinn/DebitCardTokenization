using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Net.Sockets;
using System.IO;
using System.Threading;
using System.Net;

namespace TokenServer
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class Server : Window
    {
        private Thread readThread;
        private List<Client> clients;
        private List<BankCard> bankCards;
        //private List<Token> tokens; Needed in Sorted token output
        private Tokenizer tokenizer;


        public Server()
        {
            InitializeComponent();
        }

        public void Load()
        {
            readThread = new Thread(new ThreadStart(RunServer));
            readThread.Start();
            clients = new List<Client>();
            bankCards = new List<BankCard>();
            // deserialize data - Cards and Clients
        }

        private void RunServer()
        {
            TcpListener listener;
            try
            {
                IPAddress localhost = IPAddress.Parse("127.0.0.1"); 
                listener = new TcpListener(localhost, 68000);

                listener.Start();

                while(true)
                {
                    DisplayMessage("Server loaded. Waiting for connection.");
                    ThreadPool.QueueUserWorkItem(new WaitCallback(ProcessClient), listener.AcceptSocket());
                }
            }
            catch(Exception)
            {

            }
        }

        private void DisplayMessage(object message)
        {
            if (!Dispatcher.CheckAccess())
                Dispatcher.Invoke(new Action<string>(DisplayMessage), message);
            else
                txtDisplay.Text += (string)message;
        }

        private void ProcessClient(object socket)
        {
            Socket currentSocket = socket as Socket;
            if (currentSocket == null)
                throw new InvalidDataException();

            NetworkStream networkStream = new NetworkStream(currentSocket);
            BinaryReader reader = new BinaryReader(networkStream);
            BinaryWriter writer = new BinaryWriter(networkStream);

            string response = String.Empty;
            response = reader.ReadString().Trim();
            Client client = new Client();

            if (response.Length == 1)
            {
                client.Access = (AccessLevel)(Convert.ToInt32(response));
                client.Username = reader.ReadString().Trim();
                client.Password = reader.ReadString().Trim();

                clients.Add(new Client(client));
            }
            else
            {
                client.Username = response;
                client.Password = reader.ReadString().Trim();
            }


            reader.Close();
            writer.Close();
            networkStream.Close();
            currentSocket.Close();
        }

        private void btnCheck_Click(object sender, RoutedEventArgs e)
        {
            if (txtID.Text != String.Empty)
            {
                try
                {
                    txtDisplay.Text = tokenizer.MakeToken(txtID.Text);
                }
                catch(InvalidCardID)
                {
                    MessageBox.Show("Invalid Card ID", "Error!", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
                
        }

        private void Window_Closed(object sender, EventArgs e)
        {
            System.Environment.Exit(System.Environment.ExitCode);
        }
    }
}
